# Development Workflow for Beauty by Raquel Nicole

## Project Structure
```
beauty-by-raquel-nicole/
├── src/
│   ├── components/          # Reusable UI components
│   ├── pages/              # Next.js pages and routing
│   ├── styles/             # Global styles and Tailwind config
│   ├── lib/                # Utilities and helpers
│   ├── types/              # TypeScript type definitions
│   └── api/                # API routes and handlers
├── public/                 # Static assets
├── prisma/                 # Database schema and migrations
├── docs/                   # Documentation
└── tests/                  # Test files
```

## Development Standards
- **TypeScript:** Use TypeScript for all new code
- **Component Structure:** Functional components with hooks
- **File Naming:** kebab-case for files, PascalCase for components
- **Import Organization:** Group imports (React, third-party, local)
- **Code Comments:** JSDoc comments for complex functions

## Git Workflow
- **Branch Naming:** feature/component-name, bugfix/issue-description
- **Commit Messages:** Conventional commits (feat:, fix:, docs:, etc.)
- **Pull Requests:** Required for all changes with proper descriptions
- **Code Review:** Mandatory review before merging

## Testing Requirements
- **Unit Tests:** Jest for component and utility testing
- **Integration Tests:** API endpoint testing
- **E2E Tests:** Playwright for critical user flows
- **Performance Tests:** Lighthouse CI for performance monitoring

## Deployment Pipeline
- **Staging:** Automatic deployment on feature branch merges
- **Production:** Manual deployment with approval process
- **Environment Variables:** Proper configuration management
- **Monitoring:** Error tracking and performance monitoring

## Code Quality Tools
- **ESLint:** Enforce code style and best practices
- **Prettier:** Consistent code formatting
- **Husky:** Pre-commit hooks for quality checks
- **TypeScript:** Strict mode enabled

## Performance Monitoring
- **Lighthouse CI:** Automated performance testing
- **Core Web Vitals:** Monitor LCP, TBT, CLS
- **Bundle Analysis:** Track JavaScript bundle size
- **Image Optimization:** Monitor image loading performance

## Security Practices
- **Environment Variables:** Secure storage of API keys
- **Input Validation:** Sanitize all user inputs
- **HTTPS:** Enforce HTTPS in production
- **Dependencies:** Regular security updates

## Documentation Requirements
- **README:** Project setup and development instructions
- **API Documentation:** OpenAPI/Swagger for endpoints
- **Component Documentation:** Storybook for UI components
- **Deployment Guide:** Production deployment procedures
description:
globs:
alwaysApply: false
---
